// Contract for BDB Ranger impacter probes
//   Author: Morphisor

CONTRACT_TYPE
{
    name = BDB_Ranger
    group = BluedogDB
    genericTitle = Perform a lithobraking maneuver.
    genericDescription = Perform a lithobraking maneuver on the target.
	
	title = Perform lithobraking maneuvers on @targetBody.
	description = Bob just came running into mission control, screaming Eureka and completely ruining our traditional lunchtime poker game. After he finally calmed down - with a little help from a straightjacket - he finally told us what the fuss is about. Bob thinks he's discovered the next best thing - after Mint icecream of course. It's this new concept called 'lithobraking'. He swears that it's the ultimate way to explore any other celestial surfaces out there that aren't covered by an atmosphere. The idea is simple: instead of spending precious fuel and cargo capacity on slowing down before landing, we could simply use the surface itself to slow our spacecraft down. This would mean huge savings and allow for simpler design, thereby reducing risk of errors.&br;&br;Even though some of the less inebriated among us have raised doubts about Bob's idea, the prospect of having more pocket money left for icecream is simply irresistible. So we want you to test this idea by throwing a probe at @targetBody. Do collect some science along the way though, just so we can have some data to show for it regardless.
	
    synopsis = <color=yellow>Launch a Burke probe to @targetBody and perform experiments before attempting a lithobraking maneuver.</color>
	notes = In assembly, use the tag 'Ranger' to find components fitting for this mission.
    completedMessage = So, perhaps that didn't quite work out after all. Good thing you got some data still.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by Bluedog Design Bureau
    agent = Bluedog Design Bureau

    targetBody = @targetBody1

    // Contract rewards
	advanceFunds = Random(@BluedogDB:Kerbucks05,@BluedogDB:Kerbucks075)
    rewardFunds = Random(@BluedogDB:Kerbucks105,@BluedogDB:Kerbucks2)
    rewardReputation = Random(4.0, 6.0)

	// Randomly select a possible target body.
    DATA
    {
        type = CelestialBody
		hidden = true
		
        targetBody1 = @validBodies1.Random()
    }
	
	// Target any body without atmosphere that has been reached.
	DATA
    {
        type = List<CelestialBody>
        hidden = true

        validBodies = ReachedBodies().Where(cb => (cb.IsPlanet() || cb.IsMoon()) && cb != HomeWorld())
		validBodies1 = @validBodies.Where(cb => !cb.HasAtmosphere())
    }
	
    // Hardcoded list of specific experiments
    DATA
    {
        type = List<ScienceExperiment>
        hidden = true

        experiments = [ bd_camera, bd_ionElec, bd_gammaRay, bd_UVspec, bd_radarAltimeter, logIonTrap ]
    }
	
	// Select 4 situations in LowSpace to do science.
    DATA
    {
        type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow)
        scienceSubjects = @scienceSubjectsTemp3.Random(4)
    }
	
	//The possible biomes for the target body.
    DATA
    {
        type = List<Biome>
        biomes = @targetBody.Biomes()
        hidden = true
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
        type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Transmit
    }

	PARAMETER
	{
		name = Burke
		type = VesselParameterGroup
		title = Launch a new Burke probe
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = The probe must be a new vessel
		}
		
		//First reach the target SOI with Burke before the rest of the parameters can be triggered.
		PARAMETER
		{
			name = ReachState
			type = ReachState
			title = Reach @/targetBody SOI with the Burke probe
		
			situation = ORBITING
			situation = ESCAPING
			situation = SUB_ORBITAL
			
			disableOnStateChange = true
		}
    }
	
		
	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		situation = InSpaceLow
		experiment = @/experiments.Random(2)
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(2000.0, 3000.0)
		disableOnStateChange = true
	}

	//Finally, impact the target.
	PARAMETER
	{
		name = VesselDestroyed
		type = VesselDestroyed
		mustImpactTerrain = true
	}
	
	// Mission is no longer offered for bodies that have been landed on and returned from. This is to stop endless repetitions offered for bodies that have been largely explored already.
	REQUIREMENT
	{
    name = ReturnFromSurface
    type = ReturnFromSurface
	invertRequirement = true
	
    targetBody = @/targetBody
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        type = Orbit 
        targetBody = HomeWorld()
    }
	
	// This requirement specifies the nodes that the parts with the required experiments currently reside in. Deliberately not specifying particular parts, so any part with the experiment can be used. If all applicable parts get placed to later nodes, could lead to issues however.

    REQUIREMENT
    {
        type = TechResearched

        tech = survivability
    }
}